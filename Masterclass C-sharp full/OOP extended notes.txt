section 4 - OOP: Polymorphism, Inheritance and interfaces

The big 4
- Encapsulation
Bundling data with methods that operate on this data (in single class).

- Polymorphism
The provision of a single interface to entities of different types.
Example: There is a generic concept of Ingredient, and this concept
		 can be made concrete by multiple types like cheddar, mozzarella.
		 All of the types can be used wherever the generic Ingredient concept is needed.

Poly meaning -> many
Morphe meaning -> form/shape

Polymorphism can be achieved by Inheritance.

- Abstraction
- Inheritance
Enables us to create new classes that reuse, extend and modify the behavior defined in other classes.

The class whose members are inherited is called the base class, and the class that inherits those
members is called the derived class.

Inheritance is an "is-a" kind of relationship. (Mozzarella is a ingredient)

Public methods of a class can be used in the base class and derived classes.
Private methods of a class can not be used in the derived class, or outside.
Protected members of a class can be used in the derived classes, but cant be used outside.

Inheritance can have multiple types defined to a base class, like a hierarchi:
Like the type ingredient base class, can have another type called cheese that is derived from base Ingredient.
Cheese can have multiple types like cheddar or mozzarella. This could again be split into region type classes.
Having more than a dept of 5 layers is not recommended, it adds to code complexity and changes made in upper types effects many lower types. 
Instead Composition > inheritance

A derived class cant inherit from more than one base class.
Because diamond problem

There is two types of variable conversion:
Implicit conversion -> Does not require cast expression, when a conversion is safe and lossless.
Explicit conversion -> Does require cast expression, looses data, ex: (int)(double 10.01) -> 10

There is x types of class conversion:
Upcasting	-> derived class casted to base class, ex: mozzarella casted to base class ingredient.
Downcasting -> base class casted to derived class, ex: mozzarella casted to cheddar, wont work even tho both are ingredient.
			   Will work if cheddar object casted to cheddar object, -> explicit casting or "is" operator.

"is", "is not" operator
 - checks if some object is of a given type or not -> returns bool

Abstract class as a base type
 - Not a good idea
 - Better to use interface
 - Classes cant be derived from more than one base type.

Abstract methods
 - They can only be defined in abstract classes.
 - Cant have an implementation in the base class.
 - Implicitly virtual.
 - Shall always be overriden in derived classes, because no default implementation in the base class.
 - Should be implemented if base type should not or cannot provide any default implementation.

Virtual methods
 - Overridding is optional in the derived classes.
 - Must have an implementation in the base class.

Sealed classes or methods
 - A sealed class can't be derived from.
 - A sealed override method can't be derived from or overriden in sub classes, but the class can.

Static classes are implicitly sealed
 - Cant derive from static classes because they only contain static methods, and static methods cant be overriden.
 - A static class is implemented as a one of its kind type.
 - We cannot use inheritance with static classes, They are always sealed.

Extensions of a type
 - Sometimes we want to add a method to an existing type.
 - When we do, class must be static, and methods must also be static, methods must have "this" as the first parameter.
 - Extensions wont affect the original type.
 - They are called like as if they were instance methods on the extended type.

Interfaces
 - "Behaves-like" kind of relationship.
 - IFlyable, the first I is convention.
 - Methods derived from interfaces must be public.
 - Methods are implicitly virtual.
 - Interfaces cant be instanciated

Interfaces vs abstract classes
- Both cant be instanciated
	Interface
	 - Defines the set of oberations that the implementing type must provide.
	 - Does not provide any implementation detail on its own.
	 - Does not contain any data.
	 - Defines what an object "can do"
	 - Not sure what the object "is"
	 - Verb
	abstract class
	 - Blueprint for derived classes, representing a general type of a category.
	 - May provide implementation details in non-abstract methods. Can also have abstract methods.
	 - Can contain data.
	 - Defines what an object "is"
	 - Not sure what the object "is able to do"
	 - Noun